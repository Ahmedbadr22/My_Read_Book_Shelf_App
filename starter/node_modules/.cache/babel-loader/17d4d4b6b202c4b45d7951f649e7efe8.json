{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sc-Project\\\\nd0191-c1-myreads\\\\starter\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./css/App.css\";\nimport { useEffect, useState } from \"react\";\nimport * as BooksAPI from \"./utils/BooksAPI\";\nimport BookShelf from \"./pages/bookshelf/BookShelf\";\nimport { Route, Routes } from \"react-router-dom\";\nimport SearchPage from \"./pages/search/SearchPage\";\nimport * as BooksAPi from \"./utils/BooksAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // shelf state section\n  const [allBooks, setAllBooks] = useState([]);\n  const [currentReadingBooksList, setCurrentReadingBooksList] = useState([]);\n  const [wantToReadBooksList, setWantToReadBooksList] = useState([]);\n  const [readBooksList, setReadBooksList] = useState([]); // search state section\n\n  const [searchBooksLisResult, setSearchBooksLisResult] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  /**\r\n  * @description Function To Update Section State With Passed Array Of Respond Data\r\n  * @param {Array} response - Array Of Response Data\r\n  * @return {VoidFunction}\r\n  */\n\n  const updateSectionState = response => {\n    setAllBooks(response);\n    setCurrentReadingBooksList(response.filter(book => book.shelf === \"currentlyReading\"));\n    setWantToReadBooksList(response.filter(book => book.shelf === \"wantToRead\"));\n    setReadBooksList(response.filter(book => book.shelf === \"read\"));\n  };\n  /**\r\n  * @description Async Function To Call The API To Get All The Books\r\n  * @return {Promise<any>}\r\n  */\n\n\n  const getAllBooks = async () => {\n    return await BooksAPI.getAll();\n  };\n  /**\r\n  * @description Function To Update Book Data And Update Section State\r\n  * @param {Object} book - Book To Update\r\n  * @param {string} selectedShelf - New Shelf Name\r\n  * @return {VoidFunction}\r\n  */\n\n\n  const handelShelfSelection = (book, selectedShelf) => {\n    /**\r\n    * @description Async Function To Update Book Data By Calling The API\r\n    * @param {Object} book - Book To Update\r\n    * @param {string} selectedShelf - New Shelf Name\r\n    * @return {Promise<any>}\r\n    */\n    const updateBookData = async (book, selectedShelf) => {\n      return await BooksAPi.update(book, selectedShelf);\n    };\n\n    updateBookData(book, selectedShelf).then(() => {\n      getAllBooks().then(response => updateSectionState(response));\n    });\n  };\n\n  useEffect(() => {\n    getAllBooks().then(response => updateSectionState(response));\n  }, []);\n  /**\r\n  * @description Function To Apply Search Action And Change 'SearchQuery' State\r\n  * @param {string} query - Query To Search\r\n  * @return {VoidFunction}\r\n  */\n\n  const applySearchQuery = query => {\n    setSearchQuery(query.trim());\n    handleSearchAction(query.trim());\n  };\n  /**\r\n  * @description Function To Apply Search Action And Change 'SearchQuery' State\r\n  * @param {string} query - Query To Search\r\n  * @return {VoidFunction}\r\n  */\n\n\n  const handleSearchAction = query => {\n    /**\r\n    * @description Function To Apply Search Action And Change 'SearchQuery' State\r\n    * @return {Promise<void>}\r\n    */\n    const getSearchResult = async () => {\n      const response = await BooksAPi.search(query, 10);\n      response && !response.error ? setSearchBooksLisResult(response.map(searchBook => {\n        allBooks.forEach(book => searchBook.id === book.id ? searchBook.shelf = book.shelf : null);\n        return searchBook;\n      })) : setSearchBooksLisResult([]);\n    }; // if query is get empty change SearchBookListResult state to empty array\n\n\n    if (query !== \"\") getSearchResult().then();else setSearchBooksLisResult([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(BookShelf, {\n          currentReadingBooksList: currentReadingBooksList,\n          readBooksList: readBooksList,\n          wantToReadBooksList: wantToReadBooksList,\n          OnBookShelfUpdated: handelShelfSelection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/search\",\n        element: /*#__PURE__*/_jsxDEV(SearchPage, {\n          ApplySearch: applySearchQuery,\n          SearchResult: searchBooksLisResult,\n          SearchQuery: searchQuery,\n          OnBookShelfUpdated: handelShelfSelection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"aBtsOHapiDR59B8zmH8831waczw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Sc-Project/nd0191-c1-myreads/starter/src/App.js"],"names":["useEffect","useState","BooksAPI","BookShelf","Route","Routes","SearchPage","BooksAPi","App","allBooks","setAllBooks","currentReadingBooksList","setCurrentReadingBooksList","wantToReadBooksList","setWantToReadBooksList","readBooksList","setReadBooksList","searchBooksLisResult","setSearchBooksLisResult","searchQuery","setSearchQuery","updateSectionState","response","filter","book","shelf","getAllBooks","getAll","handelShelfSelection","selectedShelf","updateBookData","update","then","applySearchQuery","query","trim","handleSearchAction","getSearchResult","search","error","map","searchBook","forEach","id"],"mappings":"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","sourcesContent":["import \"./css/App.css\";\r\nimport {useEffect, useState} from \"react\";\r\nimport * as BooksAPI from \"./utils/BooksAPI\";\r\nimport BookShelf from \"./pages/bookshelf/BookShelf\";\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport SearchPage from \"./pages/search/SearchPage\";\r\nimport * as BooksAPi from \"./utils/BooksAPI\";\r\n\r\nfunction App() {\r\n    // shelf state section\r\n    const [allBooks, setAllBooks] = useState([]);\r\n    const [currentReadingBooksList, setCurrentReadingBooksList] = useState([]);\r\n    const [wantToReadBooksList, setWantToReadBooksList] = useState([]);\r\n    const [readBooksList, setReadBooksList] = useState([]);\r\n\r\n    // search state section\r\n    const [searchBooksLisResult, setSearchBooksLisResult] = useState([]);\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n\r\n    /**\r\n    * @description Function To Update Section State With Passed Array Of Respond Data\r\n    * @param {Array} response - Array Of Response Data\r\n    * @return {VoidFunction}\r\n    */\r\n    const updateSectionState = (response) => {\r\n        setAllBooks(response);\r\n        setCurrentReadingBooksList(response.filter((book) => book.shelf === \"currentlyReading\"));\r\n        setWantToReadBooksList(response.filter((book) => book.shelf === \"wantToRead\"));\r\n        setReadBooksList(response.filter((book) => book.shelf === \"read\"));\r\n    }\r\n\r\n    /**\r\n    * @description Async Function To Call The API To Get All The Books\r\n    * @return {Promise<any>}\r\n    */\r\n    const getAllBooks = async () => {\r\n        return await BooksAPI.getAll();\r\n    };\r\n\r\n    /**\r\n    * @description Function To Update Book Data And Update Section State\r\n    * @param {Object} book - Book To Update\r\n    * @param {string} selectedShelf - New Shelf Name\r\n    * @return {VoidFunction}\r\n    */\r\n    const handelShelfSelection = (book, selectedShelf) =>{\r\n        /**\r\n        * @description Async Function To Update Book Data By Calling The API\r\n        * @param {Object} book - Book To Update\r\n        * @param {string} selectedShelf - New Shelf Name\r\n        * @return {Promise<any>}\r\n        */\r\n        const updateBookData = async (book, selectedShelf) =>{\r\n            return await BooksAPi.update(book, selectedShelf);\r\n        };\r\n\r\n        updateBookData(book, selectedShelf).then(() => {\r\n            getAllBooks().then((response => updateSectionState(response)));\r\n        });\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        getAllBooks().then(response => updateSectionState(response));\r\n    },[]);\r\n\r\n    /**\r\n    * @description Function To Apply Search Action And Change 'SearchQuery' State\r\n    * @param {string} query - Query To Search\r\n    * @return {VoidFunction}\r\n    */\r\n    const applySearchQuery = (query) => {\r\n        setSearchQuery(query.trim());\r\n        handleSearchAction(query.trim());\r\n    }\r\n\r\n    /**\r\n    * @description Function To Apply Search Action And Change 'SearchQuery' State\r\n    * @param {string} query - Query To Search\r\n    * @return {VoidFunction}\r\n    */\r\n    const handleSearchAction =  (query) => {\r\n        /**\r\n        * @description Function To Apply Search Action And Change 'SearchQuery' State\r\n        * @return {Promise<void>}\r\n        */\r\n        const getSearchResult = async () => {\r\n            const response = await BooksAPi.search(query, 10);\r\n\r\n            response && !response.error ? setSearchBooksLisResult(response.map((searchBook) => {\r\n                allBooks.forEach((book) => searchBook.id === book.id ? searchBook.shelf = book.shelf : null)\r\n                return searchBook;\r\n            })) : setSearchBooksLisResult([]);\r\n        };\r\n\r\n        // if query is get empty change SearchBookListResult state to empty array\r\n        if(query !== \"\") getSearchResult().then();\r\n        else setSearchBooksLisResult([]);\r\n    }\r\n\r\n\r\n    return (\r\n    <div className=\"app\">\r\n        <Routes>\r\n            <Route\r\n                exact\r\n                path=\"/\"\r\n                element={<BookShelf\r\n                    currentReadingBooksList={currentReadingBooksList}\r\n                    readBooksList={readBooksList}\r\n                    wantToReadBooksList={wantToReadBooksList}\r\n                    OnBookShelfUpdated={handelShelfSelection}\r\n                />\r\n            }\r\n            />\r\n            <Route\r\n                exact\r\n                path=\"/search\"\r\n                element={<SearchPage\r\n                    ApplySearch={applySearchQuery}\r\n                    SearchResult={searchBooksLisResult}\r\n                    SearchQuery={searchQuery}\r\n                    OnBookShelfUpdated={handelShelfSelection}\r\n                />}\r\n            />\r\n        </Routes>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}